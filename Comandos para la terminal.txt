Comandos para la terminal 

1. Configuración Inicial

# --- Entorno virtual ---
# Crear entorno virtual llamado "eva2"
python -m venv eva2

# Activar entorno virtual
# Windows:
eva2\Scripts\activate
# Linux / Mac:
source eva2/bin/activate

# --- Instalación de dependencias (paquetes usados) ---
# Instalación principal (paquetes recomendados para el proyecto)
pip install Django djangorestframework django-filter psycopg2-binary django-cors-headers drf-yasg setuptools

# Nota:
# - 'drf-yasg' lo instalamos para la documentación Swagger/Redoc.
# - 'setuptools' se instaló para resolver errores relacionados con pkg_resources.
# - Si vas a usar coreapi por alguna razón antigua, ver el bloque de abajo.

# --- Paquetes desinstalados (si aplicó) ---
# Si tuviste problemas con coreapi (incompatible con Python 3.13), desinstálalo:
pip uninstall coreapi

# (Opcional) Si instalaste coreapi y quieres reinstalar:
# pip install coreapi==<versión-compatible>   # No recomendado en Python 3.13+

# --- Guardar exactamente lo que hay en el entorno (recomendado) ---
# Esto crea requirements.txt con las versiones exactas de los paquetes instalados
pip freeze > requirements.txt

# Revisa requirements.txt y súbelo junto al proyecto para reproducibilidad.

# --- Crear proyecto y app ---
# Desde la carpeta donde quieres crear el proyecto (donde estará manage.py)
django-admin startproject eva2_clinica .

# Crear la app 'api'
django-admin startapp api

# --- Migraciones y creación de superusuario ---
python manage.py makemigrations
python manage.py migrate

# Crear superusuario (seguir las instrucciones en pantalla)
python manage.py createsuperuser

# --- Cargar datos de prueba (opcional) ---
# Si tienes manage_data.py en la raíz del proyecto:
python manage.py shell < manage_data.py

# --- Ejecutar el servidor ---
python manage.py runserver

# URLs útiles (en local)
# http://localhost:8000/          -> Página de inicio
# http://localhost:8000/admin/    -> Panel de administración (login con superuser)
# http://localhost:8000/api/      -> Endpoints de la API
# http://localhost:8000/api/swagger/ -> Documentación Swagger (si drf-yasg instalado)
# http://localhost:8000/api/redoc/   -> Documentación Redoc (si drf-yasg instalado)

# --- Notas y recomendaciones ---
# 1) Si tu Python es 3.13 y ves errores con 'coreapi' (por ejemplo 'cgi' o pkg_resources),
#    la solución segura es DESINSTALAR coreapi y usar drf-yasg para la documentación.
# 2) Siempre ejecuta 'pip freeze > requirements.txt' dentro del entorno virtual antes de
#    compartir el proyecto, así las versiones quedan registradas.
# 3) Si más adelante necesitas reinstalar exactamente las mismas versiones:
#    pip install -r requirements.txt
